#include "TokenTypes.hpp"

#define A_NEST_LEVEL_PAIR(x) {NestLevel::x , #x}
#define A_MARKUP_TOKEN_TYPE_PAIR(x) {MarkupTokenType::x , #x}
#define A_SCRIPT_TOKEN_TYPE_PAIR(x) {ScriptTokenType::x , #x}
#define A_RVALUE_TOKEN_TYPE_PAIR(x) {RValueTokenType::x , #x}


namespace A
{
  std::unordered_map<NestLevel, std::string> NEST_LEVELS_STRINGS = {
    A_NEST_LEVEL_PAIR(UNNESTED),
    A_NEST_LEVEL_PAIR(MARKUP),
    A_NEST_LEVEL_PAIR(MARKUP_MAIN_COMPONENT),
    A_NEST_LEVEL_PAIR(MARKUP_SUB_COMPONENT),
    A_NEST_LEVEL_PAIR(MARKUP_ID_COMPONENT),
    A_NEST_LEVEL_PAIR(MARKUP_ID_COMPONENT_KEY),
    A_NEST_LEVEL_PAIR(COMPONENT),
    A_NEST_LEVEL_PAIR(RVALUE),
    A_NEST_LEVEL_PAIR(RVALUE_SUB_EXPRESSION),
    A_NEST_LEVEL_PAIR(RVALUE_LIST),
    A_NEST_LEVEL_PAIR(RVALUE_TUPLE),
    A_NEST_LEVEL_PAIR(RVALUE_DICTIONARY),
    A_NEST_LEVEL_PAIR(RVALUE_LAMBDA_DEFINITION_PARAMETER_LIST),
    A_NEST_LEVEL_PAIR(RVALUE_LAMBDA_DEFINITION_PRE_PARAMETER_LIST),
    A_NEST_LEVEL_PAIR(RVALUE_LAMBDA_BODY),
    A_NEST_LEVEL_PAIR(RVALUE_FUNCTION_CALL_PARAMETER_LIST),
    A_NEST_LEVEL_PAIR(RVALUE_CONTAINER_INDEX),
    A_NEST_LEVEL_PAIR(RVALUE_TEXT_DOUBLE_QUOTED),
    A_NEST_LEVEL_PAIR(RVALUE_TEXT_SINGLE_QUOTED),
    A_NEST_LEVEL_PAIR(RVALUE_CONDITION),
    A_NEST_LEVEL_PAIR(SCRIPT),
    A_NEST_LEVEL_PAIR(SCRIPT_DICTIONARY_KEY_TYPE),
    A_NEST_LEVEL_PAIR(SCRIPT_DICTIONARY_VALUE_TYPE),
    A_NEST_LEVEL_PAIR(SCRIPT_TUPLE_ELEMENTS_TYPES),
    A_NEST_LEVEL_PAIR(SCRIPT_FUNCTION_DECLARATION),
    A_NEST_LEVEL_PAIR(SCRIPT_FUNCTION_PARAMETER_TYPES),
    A_NEST_LEVEL_PAIR(SCRIPT_FUNCTION_PARAMETER_LIST),
    A_NEST_LEVEL_PAIR(SCRIPT_FUNCTION_BODY),
    A_NEST_LEVEL_PAIR(SCRIPT_IF_CONDITION),
    A_NEST_LEVEL_PAIR(SCRIPT_IF_BODY),
    A_NEST_LEVEL_PAIR(SCRIPT_WHILE_CONDITION),
    A_NEST_LEVEL_PAIR(SCRIPT_WHILE_BODY),
    A_NEST_LEVEL_PAIR(SCRIPT_ELSEIF_BODY),
    A_NEST_LEVEL_PAIR(SCRIPT_ELSEIF_CONDITION),
    A_NEST_LEVEL_PAIR(SCRIPT_ELSE_BODY),
    A_NEST_LEVEL_PAIR(SCRIPT_CONDITION),
    A_NEST_LEVEL_PAIR(SCRIPT_CONDITION_BODY),
    A_NEST_LEVEL_PAIR(SCRIPT_NAME_DECLARATION),
    A_NEST_LEVEL_PAIR(SCRIPT_COMMAND)
  };

  std::unordered_map<MarkupTokenType, std::string> MARKUP_TOKEN_TYPES_STRINGS = {
    A_MARKUP_TOKEN_TYPE_PAIR(NO_TOKEN),
    A_MARKUP_TOKEN_TYPE_PAIR(UNDEFINED),
    A_MARKUP_TOKEN_TYPE_PAIR(MAIN_COMPONENT_OPENING),
    A_MARKUP_TOKEN_TYPE_PAIR(MAIN_COMPONENT_OPENING_NAME),
    A_MARKUP_TOKEN_TYPE_PAIR(MAIN_COMPONENT_OPENING_NAME_CLOSING),
    A_MARKUP_TOKEN_TYPE_PAIR(MAIN_COMPONENT_CLOSING),
    A_MARKUP_TOKEN_TYPE_PAIR(MAIN_COMPONENT_CLOSING_SLASH),
    A_MARKUP_TOKEN_TYPE_PAIR(MAIN_COMPONENT_CLOSING_NAME),
    A_MARKUP_TOKEN_TYPE_PAIR(MAIN_COMPONENT_CLOSING_NAME_CLOSING),
    A_MARKUP_TOKEN_TYPE_PAIR(ID_COMPONENT_OPENING),
    A_MARKUP_TOKEN_TYPE_PAIR(ID_COMPONENT_ID_NAME),
    A_MARKUP_TOKEN_TYPE_PAIR(ID_COMPONENT_ID_EQUAL),
    A_MARKUP_TOKEN_TYPE_PAIR(ID_COMPONENT_ID_CLOSING),
    A_MARKUP_TOKEN_TYPE_PAIR(ID_COMPONENT_CLOSING),
    A_MARKUP_TOKEN_TYPE_PAIR(ID_COMPONENT_CLOSING_SLASH),
    A_MARKUP_TOKEN_TYPE_PAIR(ID_COMPONENT_CLOSING_ID_NAME),
    A_MARKUP_TOKEN_TYPE_PAIR(ID_COMPONENT_CLOSING_ID_NAME_CLOSING),
    A_MARKUP_TOKEN_TYPE_PAIR(SUB_COMPONENT_NAME),
    A_MARKUP_TOKEN_TYPE_PAIR(SUB_COMPONENT_BRACKET),
    A_MARKUP_TOKEN_TYPE_PAIR(SUB_COMPONENT_CLOSING),
    A_MARKUP_TOKEN_TYPE_PAIR(STANDALONE_SWITCH),
    A_MARKUP_TOKEN_TYPE_PAIR(SWITCH_NAME),
    A_MARKUP_TOKEN_TYPE_PAIR(SWITCH_COLON),
    A_MARKUP_TOKEN_TYPE_PAIR(SWITCH_VALUE_START),
    A_MARKUP_TOKEN_TYPE_PAIR(TAG_NAME),
    A_MARKUP_TOKEN_TYPE_PAIR(TAG_EQUAL),
    A_MARKUP_TOKEN_TYPE_PAIR(PREPROCESSOR_COMMAND_BEGIN),
    A_MARKUP_TOKEN_TYPE_PAIR(COMMENT_BEGIN),
    A_MARKUP_TOKEN_TYPE_PAIR(COMMENT_END),
    A_MARKUP_TOKEN_TYPE_PAIR(MULTILINE_COMMENT_OPENING),
    A_MARKUP_TOKEN_TYPE_PAIR(MULTILINE_COMMENT_BODY),
    A_MARKUP_TOKEN_TYPE_PAIR(MULTILINE_COMMENT_CLOSING) 
  };

  std::unordered_map<ScriptTokenType, std::string> SCRIPT_TOKEN_TYPES_STRINGS = {
    A_SCRIPT_TOKEN_TYPE_PAIR(NO_TOKEN),
    A_SCRIPT_TOKEN_TYPE_PAIR(DECLARATION_LET),
    A_SCRIPT_TOKEN_TYPE_PAIR(QUALIFIER),
    A_SCRIPT_TOKEN_TYPE_PAIR(TYPE_NAME),
    A_SCRIPT_TOKEN_TYPE_PAIR(TYPE_DELIMETER),
    A_SCRIPT_TOKEN_TYPE_PAIR(VARIABLE_NAME),
    A_SCRIPT_TOKEN_TYPE_PAIR(DEFINITION_EQUAL),
    A_SCRIPT_TOKEN_TYPE_PAIR(ALIAS_ARROW),
    A_SCRIPT_TOKEN_TYPE_PAIR(LIST_ELEMENTS_TYPE_OPENING),
    A_SCRIPT_TOKEN_TYPE_PAIR(LIST_ELEMENTS_TYPE_CLOSING),
    A_SCRIPT_TOKEN_TYPE_PAIR(DICTIONARY_ELEMENTS_TYPE_OPENING),
    A_SCRIPT_TOKEN_TYPE_PAIR(DICTIONARY_TYPE_ARROW),
    A_SCRIPT_TOKEN_TYPE_PAIR(DICTIONARY_ELEMENTS_TYPE_CLOSING),
    A_SCRIPT_TOKEN_TYPE_PAIR(TUPLE_ELEMENTS_TYPES_OPENING),
    A_SCRIPT_TOKEN_TYPE_PAIR(TUPLE_ELEMENTS_TYPES_COMMA),
    A_SCRIPT_TOKEN_TYPE_PAIR(TUPLE_ELEMENTS_TYPES_CLOSING),
    A_SCRIPT_TOKEN_TYPE_PAIR(FUNCTION_PARAMETERS_VALUE_TYPE_OPENING),
    A_SCRIPT_TOKEN_TYPE_PAIR(FUNCTION_PARAMETERS_TYPES_COMMA),
    A_SCRIPT_TOKEN_TYPE_PAIR(FUNCTION_VALUE_TYPE_COLON),
    A_SCRIPT_TOKEN_TYPE_PAIR(FUNCTION_PARAMETERS_VALUE_TYPE_CLOSING),
    A_SCRIPT_TOKEN_TYPE_PAIR(FUNCTION_DEFINITION_OPENING),
    A_SCRIPT_TOKEN_TYPE_PAIR(FUNCTION_NAME),
    A_SCRIPT_TOKEN_TYPE_PAIR(FUNCTION_DECLARATION_PARAMETER_LIST_OPENING),
    A_SCRIPT_TOKEN_TYPE_PAIR(FUNCTION_DECLARATION_PARAMETER_LIST_CLOSING),
    A_SCRIPT_TOKEN_TYPE_PAIR(FUNCTION_PARAMETER_NAME),
    A_SCRIPT_TOKEN_TYPE_PAIR(FUNCTION_VALUE_TYPE),
    A_SCRIPT_TOKEN_TYPE_PAIR(FUNCTION_DEFINITION_CLOSING),
    A_SCRIPT_TOKEN_TYPE_PAIR(FUNCTION_DEFINITION_COLON),
    A_SCRIPT_TOKEN_TYPE_PAIR(FUNCTION_PARAMETERS_COMMA),
    A_SCRIPT_TOKEN_TYPE_PAIR(IF_CONDITION_OPENING),
    A_SCRIPT_TOKEN_TYPE_PAIR(IF_CONDITION_CLOSING),
    A_SCRIPT_TOKEN_TYPE_PAIR(ELSEIF_CONDITION_OPENING),
    A_SCRIPT_TOKEN_TYPE_PAIR(ELSEIF_CONDITION_CLOSING),
    A_SCRIPT_TOKEN_TYPE_PAIR(WHILE_CONDITION_OPENING),
    A_SCRIPT_TOKEN_TYPE_PAIR(WHILE_CONDITION_CLOSING),
    A_SCRIPT_TOKEN_TYPE_PAIR(IF_CONDITION_BODY_OPENING),
    A_SCRIPT_TOKEN_TYPE_PAIR(IF_CONDITION_BODY_CLOSING),
    A_SCRIPT_TOKEN_TYPE_PAIR(CONDITION_OPENING),
    A_SCRIPT_TOKEN_TYPE_PAIR(ELSEIF_CONDITION_BODY_OPENING),
    A_SCRIPT_TOKEN_TYPE_PAIR(ELSEIF_CONDITION_BODY_CLOSING),
    A_SCRIPT_TOKEN_TYPE_PAIR(ELSE_CONDITION_BODY_OPENING),
    A_SCRIPT_TOKEN_TYPE_PAIR(ELSE_CONDITION_BODY_CLOSING),
    A_SCRIPT_TOKEN_TYPE_PAIR(WHILE_CONDITION_BODY_OPENING),
    A_SCRIPT_TOKEN_TYPE_PAIR(WHILE_CONDITION_BODY_CLOSING),
    A_SCRIPT_TOKEN_TYPE_PAIR(BLOCK_END),
    A_SCRIPT_TOKEN_TYPE_PAIR(LVALUE_NAME)
  };

  std::unordered_map<RValueTokenType, std::string> RVALUE_TOKEN_TYPES_STRINGS = {
    A_RVALUE_TOKEN_TYPE_PAIR(NO_TOKEN),
    A_RVALUE_TOKEN_TYPE_PAIR(NUMBER),
    A_RVALUE_TOKEN_TYPE_PAIR(CONSTANT),
    A_RVALUE_TOKEN_TYPE_PAIR(IDENTIFIER),
    A_RVALUE_TOKEN_TYPE_PAIR(INFIX_OPERATOR),
    A_RVALUE_TOKEN_TYPE_PAIR(PREFIX_OPERATOR),
    A_RVALUE_TOKEN_TYPE_PAIR(SUB_EXPRESSION_OPENING),
    A_RVALUE_TOKEN_TYPE_PAIR(SUB_EXPRESSION_CLOSING),
    A_RVALUE_TOKEN_TYPE_PAIR(LIST_OPENING),
    A_RVALUE_TOKEN_TYPE_PAIR(LIST_CLOSING),
    A_RVALUE_TOKEN_TYPE_PAIR(TUPLE_OPENING),
    A_RVALUE_TOKEN_TYPE_PAIR(TUPLE_CLOSING),
    A_RVALUE_TOKEN_TYPE_PAIR(DICTIONARY_OPENING),
    A_RVALUE_TOKEN_TYPE_PAIR(DICTIONARY_CLOSING),
    A_RVALUE_TOKEN_TYPE_PAIR(DICTIONARY_KEY),
    A_RVALUE_TOKEN_TYPE_PAIR(DICTIONARY_KEY_EQUAL),
    A_RVALUE_TOKEN_TYPE_PAIR(CONTAINER_INDEX_OPENING),
    A_RVALUE_TOKEN_TYPE_PAIR(CONTAINER_INDEX_CLOSING),
    A_RVALUE_TOKEN_TYPE_PAIR(LAMBDA_OPENING),
    A_RVALUE_TOKEN_TYPE_PAIR(LAMBDA_PARAMETER_LIST_OPENING),
    A_RVALUE_TOKEN_TYPE_PAIR(LAMBDA_PARAMETER_LIST_CLOSING),
    A_RVALUE_TOKEN_TYPE_PAIR(LAMBDA_BODY_OPENING),
    A_RVALUE_TOKEN_TYPE_PAIR(LAMBDA_BODY_CLOSING),
    A_RVALUE_TOKEN_TYPE_PAIR(LAMBDA_CLOSING),
    A_RVALUE_TOKEN_TYPE_PAIR(MEMBER_OPERATOR),
    A_RVALUE_TOKEN_TYPE_PAIR(TEXT_OPENING),
    A_RVALUE_TOKEN_TYPE_PAIR(TEXT_CONTENT),
    A_RVALUE_TOKEN_TYPE_PAIR(TEXT_CLOSING),
    A_RVALUE_TOKEN_TYPE_PAIR(FUNCTION_CALL_PARAMETER_LIST_OPENING),
    A_RVALUE_TOKEN_TYPE_PAIR(FUNCTION_CALL_PARAMETER_LIST_CLOSING),
    A_RVALUE_TOKEN_TYPE_PAIR(FUNCTION_CALL_PARAMETERS_COMMA),
    A_RVALUE_TOKEN_TYPE_PAIR(VALUE)
  };
}
